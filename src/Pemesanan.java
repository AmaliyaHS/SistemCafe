

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Acer
 */

import java.awt.Image;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Calendar;
import java.util.GregorianCalendar;
import javax.swing.ImageIcon;
import javax.swing.JCheckBox;
import javax.swing.JOptionPane;
import javax.swing.RowFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;

public class Pemesanan extends javax.swing.JFrame {

    private static Connection c;
    private static Statement s;
    private static ResultSet rs;
    private static PreparedStatement ps;
    private static DefaultTableModel model = new DefaultTableModel();
    
    private int x;
    private int y;
     
    private ImageIcon format = null;
    
    String nama[] = new String[17];
    int harga[] = new int[17];
    int jml[] = new int[17];
    int total[] = new int[17];
    int countChecked = 0;
    
    /**
     * Creates new form coffee
     */
    public Pemesanan() {
        initComponents();
        currentDate();
        this.setLocationRelativeTo(null); // center form in the screen
        this.setResizable(false); // prevent frame from being resized
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        espressoCheckBox = new javax.swing.JCheckBox();
        jLabel2 = new javax.swing.JLabel();
        mochaCheckBox = new javax.swing.JCheckBox();
        picolloCheckBox = new javax.swing.JCheckBox();
        affogattoCheckBox = new javax.swing.JCheckBox();
        cappucinoCheckBox = new javax.swing.JCheckBox();
        hazelnutLatteCheckBox = new javax.swing.JCheckBox();
        frapucinoCheckBox = new javax.swing.JCheckBox();
        mochaLatteCheckBox = new javax.swing.JCheckBox();
        jLabel22 = new javax.swing.JLabel();
        jLabel23 = new javax.swing.JLabel();
        jLabel24 = new javax.swing.JLabel();
        jLabel25 = new javax.swing.JLabel();
        jLabel26 = new javax.swing.JLabel();
        jLabel27 = new javax.swing.JLabel();
        jLabel28 = new javax.swing.JLabel();
        hrgEspresso = new javax.swing.JLabel();
        hrgMocha = new javax.swing.JLabel();
        hrgPicollo = new javax.swing.JLabel();
        hrgAffogatto = new javax.swing.JLabel();
        hrgCappucino = new javax.swing.JLabel();
        hrgHazelnutLatte = new javax.swing.JLabel();
        hrgMochaLatte = new javax.swing.JLabel();
        hrgFrapucino = new javax.swing.JLabel();
        espressoSpinner = new javax.swing.JSpinner();
        mochaSpinner = new javax.swing.JSpinner();
        picolloSpinner = new javax.swing.JSpinner();
        affogattoSpinner = new javax.swing.JSpinner();
        cappucinoSpinner = new javax.swing.JSpinner();
        hazelnutLatteSpinner = new javax.swing.JSpinner();
        mochaLatteSpinner = new javax.swing.JSpinner();
        frapucinoSpinner = new javax.swing.JSpinner();
        jPanel2 = new javax.swing.JPanel();
        panel = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        closeButton = new javax.swing.JButton();
        tanggalLabel = new javax.swing.JLabel();
        jamLabel = new javax.swing.JLabel();
        nomorComboBox = new javax.swing.JComboBox<>();
        jPanel3 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        gambar = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        redVelvetCheckBox = new javax.swing.JCheckBox();
        jLabel9 = new javax.swing.JLabel();
        hrgRedVelvet = new javax.swing.JLabel();
        pannaCotaCheckBox = new javax.swing.JCheckBox();
        chocoMousseCheckBox = new javax.swing.JCheckBox();
        puddingCakeCheckBox = new javax.swing.JCheckBox();
        lamingtonCheckBox = new javax.swing.JCheckBox();
        hokkaidoCheeseCheckBox = new javax.swing.JCheckBox();
        custardPuddingCheckBox = new javax.swing.JCheckBox();
        pieCreamPuffCheckBox = new javax.swing.JCheckBox();
        eclairCheckBox = new javax.swing.JCheckBox();
        hrgPannaCota = new javax.swing.JLabel();
        hrgChocoMousse = new javax.swing.JLabel();
        hrgPuddingCake = new javax.swing.JLabel();
        hrgLamington = new javax.swing.JLabel();
        hrgHokkaidoCheese = new javax.swing.JLabel();
        hrgCustardPudding = new javax.swing.JLabel();
        hrgPieCreamPuff = new javax.swing.JLabel();
        hrgEclair = new javax.swing.JLabel();
        redVelvetSpinner = new javax.swing.JSpinner();
        pannaCotaSpinner = new javax.swing.JSpinner();
        chocoMousseSpinner = new javax.swing.JSpinner();
        puddingCakeSpinner = new javax.swing.JSpinner();
        lamingtonSpinner = new javax.swing.JSpinner();
        hokkaidoCheeseSpinner = new javax.swing.JSpinner();
        custardPuddingSpinner = new javax.swing.JSpinner();
        pieCreamPuffSpinner = new javax.swing.JSpinner();
        eclairSpinner = new javax.swing.JSpinner();
        jPanel6 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        pesanTable = new javax.swing.JTable();
        jPanel7 = new javax.swing.JPanel();
        orderButton = new javax.swing.JButton();
        editButton = new javax.swing.JButton();
        deleteButton = new javax.swing.JButton();
        resetButton = new javax.swing.JButton();
        doneButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(1300, 630));

        jPanel1.setBackground(new java.awt.Color(255, 178, 207));
        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 4));

        jLabel1.setFont(new java.awt.Font("Times New Roman", 3, 24)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Coffee");

        espressoCheckBox.setBackground(new java.awt.Color(255, 178, 207));
        espressoCheckBox.setFont(new java.awt.Font("Tahoma", 2, 14)); // NOI18N
        espressoCheckBox.setText("Espresso");
        espressoCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                espressoCheckBoxActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel2.setText("20000");

        mochaCheckBox.setBackground(new java.awt.Color(255, 178, 207));
        mochaCheckBox.setFont(new java.awt.Font("Tahoma", 2, 14)); // NOI18N
        mochaCheckBox.setText("Mocha");
        mochaCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mochaCheckBoxActionPerformed(evt);
            }
        });

        picolloCheckBox.setBackground(new java.awt.Color(255, 178, 207));
        picolloCheckBox.setFont(new java.awt.Font("Tahoma", 2, 14)); // NOI18N
        picolloCheckBox.setText("Picollo");
        picolloCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                picolloCheckBoxActionPerformed(evt);
            }
        });

        affogattoCheckBox.setBackground(new java.awt.Color(255, 178, 207));
        affogattoCheckBox.setFont(new java.awt.Font("Tahoma", 2, 14)); // NOI18N
        affogattoCheckBox.setText("Affogatto");
        affogattoCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                affogattoCheckBoxActionPerformed(evt);
            }
        });

        cappucinoCheckBox.setBackground(new java.awt.Color(255, 178, 207));
        cappucinoCheckBox.setFont(new java.awt.Font("Tahoma", 2, 14)); // NOI18N
        cappucinoCheckBox.setText("Cappucino");
        cappucinoCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cappucinoCheckBoxActionPerformed(evt);
            }
        });

        hazelnutLatteCheckBox.setBackground(new java.awt.Color(255, 178, 207));
        hazelnutLatteCheckBox.setFont(new java.awt.Font("Tahoma", 2, 14)); // NOI18N
        hazelnutLatteCheckBox.setText("Hazelnut Latte");
        hazelnutLatteCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hazelnutLatteCheckBoxActionPerformed(evt);
            }
        });

        frapucinoCheckBox.setBackground(new java.awt.Color(255, 178, 207));
        frapucinoCheckBox.setFont(new java.awt.Font("Tahoma", 2, 14)); // NOI18N
        frapucinoCheckBox.setText("Frapucino");
        frapucinoCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                frapucinoCheckBoxActionPerformed(evt);
            }
        });

        mochaLatteCheckBox.setBackground(new java.awt.Color(255, 178, 207));
        mochaLatteCheckBox.setFont(new java.awt.Font("Tahoma", 2, 14)); // NOI18N
        mochaLatteCheckBox.setText("Mocha Latte");
        mochaLatteCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mochaLatteCheckBoxActionPerformed(evt);
            }
        });

        jLabel22.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel22.setText("20000");

        jLabel23.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel23.setText("20000");

        jLabel24.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel24.setText("20000");

        jLabel25.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel25.setText("20000");

        jLabel26.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel26.setText("20000");

        jLabel27.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel27.setText("20000");

        jLabel28.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel28.setText("20000");

        hrgEspresso.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        hrgEspresso.setText("20000");

        hrgMocha.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        hrgMocha.setText("22000");

        hrgPicollo.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        hrgPicollo.setText("25000");

        hrgAffogatto.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        hrgAffogatto.setText("40000");

        hrgCappucino.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        hrgCappucino.setText("37000");

        hrgHazelnutLatte.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        hrgHazelnutLatte.setText("40000");

        hrgMochaLatte.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        hrgMochaLatte.setText("40000");

        hrgFrapucino.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        hrgFrapucino.setText("35000");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(54, 54, 54)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(mochaSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(espressoSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(picolloSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(affogattoSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cappucinoSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(hazelnutLatteSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(mochaLatteSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(frapucinoSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(42, 42, 42)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(espressoCheckBox, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(mochaCheckBox, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(picolloCheckBox, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(affogattoCheckBox, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cappucinoCheckBox, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(frapucinoCheckBox, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(mochaLatteCheckBox, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(hazelnutLatteCheckBox, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(hrgMochaLatte)
                                    .addComponent(hrgHazelnutLatte)
                                    .addComponent(hrgCappucino)
                                    .addComponent(hrgAffogatto)
                                    .addComponent(hrgPicollo)
                                    .addComponent(hrgMocha)
                                    .addComponent(hrgEspresso))
                                .addGap(225, 225, 225)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel24)
                                    .addComponent(jLabel23)
                                    .addComponent(jLabel22)
                                    .addComponent(jLabel2)
                                    .addComponent(jLabel25)
                                    .addComponent(jLabel26)
                                    .addComponent(jLabel27)
                                    .addComponent(jLabel28)))
                            .addComponent(hrgFrapucino))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel22)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel23)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel24)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel25)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel26)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel27))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(espressoCheckBox)
                            .addComponent(hrgEspresso)
                            .addComponent(espressoSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(mochaCheckBox)
                            .addComponent(hrgMocha)
                            .addComponent(mochaSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(picolloCheckBox)
                            .addComponent(hrgPicollo)
                            .addComponent(picolloSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(affogattoCheckBox)
                            .addComponent(hrgAffogatto)
                            .addComponent(affogattoSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cappucinoCheckBox)
                            .addComponent(hrgCappucino)
                            .addComponent(cappucinoSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(hazelnutLatteCheckBox)
                            .addComponent(hrgHazelnutLatte)
                            .addComponent(hazelnutLatteSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(mochaLatteCheckBox)
                                    .addComponent(hrgMochaLatte)
                                    .addComponent(mochaLatteSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(frapucinoCheckBox)
                                    .addComponent(hrgFrapucino)
                                    .addComponent(frapucinoSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addComponent(jLabel28)))))
                .addContainerGap(77, Short.MAX_VALUE))
        );

        jPanel2.setBackground(new java.awt.Color(255, 178, 207));
        jPanel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 4));

        panel.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                panelMouseDragged(evt);
            }
        });
        panel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                panelMousePressed(evt);
            }
        });

        jLabel10.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel10.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/pemesanan/icon2.png"))); // NOI18N

        closeButton.setText("X");
        closeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeButtonActionPerformed(evt);
            }
        });

        tanggalLabel.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        jamLabel.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N

        nomorComboBox.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        nomorComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "No. Meja", "01", "02", "03", "04", "05", "06", "07", "08", "09", "10" }));
        nomorComboBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                nomorComboBoxItemStateChanged(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(22, 22, 22)
                                .addComponent(tanggalLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(14, 14, 14)
                                .addComponent(jamLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(panel, javax.swing.GroupLayout.PREFERRED_SIZE, 1020, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(129, 129, 129)
                                .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 787, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(7, 7, 7)
                        .addComponent(closeButton))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(943, 943, 943)
                        .addComponent(nomorComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(45, 45, 45)
                .addComponent(tanggalLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(76, 76, 76)
                .addComponent(jamLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addComponent(panel, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(4, 4, 4)
                .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(closeButton))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(68, 68, 68)
                .addComponent(nomorComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        jPanel3.setBackground(new java.awt.Color(255, 178, 207));
        jPanel3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 4));

        jPanel5.setBackground(new java.awt.Color(0, 0, 0));

        gambar.setBackground(new java.awt.Color(0, 0, 0));

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(gambar, javax.swing.GroupLayout.DEFAULT_SIZE, 352, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(gambar, javax.swing.GroupLayout.DEFAULT_SIZE, 298, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        jPanel4.setBackground(new java.awt.Color(255, 178, 207));
        jPanel4.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 4));

        redVelvetCheckBox.setBackground(new java.awt.Color(255, 178, 207));
        redVelvetCheckBox.setFont(new java.awt.Font("Tahoma", 2, 14)); // NOI18N
        redVelvetCheckBox.setText("Red Velvet");
        redVelvetCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                redVelvetCheckBoxActionPerformed(evt);
            }
        });

        jLabel9.setFont(new java.awt.Font("Times New Roman", 3, 24)); // NOI18N
        jLabel9.setText("Cake");

        hrgRedVelvet.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        hrgRedVelvet.setText("25000");

        pannaCotaCheckBox.setBackground(new java.awt.Color(255, 178, 207));
        pannaCotaCheckBox.setFont(new java.awt.Font("Tahoma", 2, 14)); // NOI18N
        pannaCotaCheckBox.setText("Panna Cota");
        pannaCotaCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pannaCotaCheckBoxActionPerformed(evt);
            }
        });

        chocoMousseCheckBox.setBackground(new java.awt.Color(255, 178, 207));
        chocoMousseCheckBox.setFont(new java.awt.Font("Tahoma", 2, 14)); // NOI18N
        chocoMousseCheckBox.setText("Choco Mousse");
        chocoMousseCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chocoMousseCheckBoxActionPerformed(evt);
            }
        });

        puddingCakeCheckBox.setBackground(new java.awt.Color(255, 178, 207));
        puddingCakeCheckBox.setFont(new java.awt.Font("Tahoma", 2, 14)); // NOI18N
        puddingCakeCheckBox.setText("Puddding Cake");
        puddingCakeCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                puddingCakeCheckBoxActionPerformed(evt);
            }
        });

        lamingtonCheckBox.setBackground(new java.awt.Color(255, 178, 207));
        lamingtonCheckBox.setFont(new java.awt.Font("Tahoma", 2, 14)); // NOI18N
        lamingtonCheckBox.setText("Lamington");
        lamingtonCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lamingtonCheckBoxActionPerformed(evt);
            }
        });

        hokkaidoCheeseCheckBox.setBackground(new java.awt.Color(255, 178, 207));
        hokkaidoCheeseCheckBox.setFont(new java.awt.Font("Tahoma", 2, 14)); // NOI18N
        hokkaidoCheeseCheckBox.setText("Hokkaido Cheese");
        hokkaidoCheeseCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hokkaidoCheeseCheckBoxActionPerformed(evt);
            }
        });

        custardPuddingCheckBox.setBackground(new java.awt.Color(255, 178, 207));
        custardPuddingCheckBox.setFont(new java.awt.Font("Tahoma", 2, 14)); // NOI18N
        custardPuddingCheckBox.setText("Custard Pudding");
        custardPuddingCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                custardPuddingCheckBoxActionPerformed(evt);
            }
        });

        pieCreamPuffCheckBox.setBackground(new java.awt.Color(255, 178, 207));
        pieCreamPuffCheckBox.setFont(new java.awt.Font("Tahoma", 2, 14)); // NOI18N
        pieCreamPuffCheckBox.setText("Pie Cream Puff");
        pieCreamPuffCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pieCreamPuffCheckBoxActionPerformed(evt);
            }
        });

        eclairCheckBox.setBackground(new java.awt.Color(255, 178, 207));
        eclairCheckBox.setFont(new java.awt.Font("Tahoma", 2, 14)); // NOI18N
        eclairCheckBox.setText("Eclair");
        eclairCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eclairCheckBoxActionPerformed(evt);
            }
        });

        hrgPannaCota.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        hrgPannaCota.setText("25000");

        hrgChocoMousse.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        hrgChocoMousse.setText("30000");

        hrgPuddingCake.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        hrgPuddingCake.setText("25000");

        hrgLamington.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        hrgLamington.setText("15000");

        hrgHokkaidoCheese.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        hrgHokkaidoCheese.setText("20000");

        hrgCustardPudding.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        hrgCustardPudding.setText("13000");

        hrgPieCreamPuff.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        hrgPieCreamPuff.setText("18000");

        hrgEclair.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        hrgEclair.setText("25000");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(148, 148, 148)
                        .addComponent(jLabel9))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(redVelvetSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(pannaCotaSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(chocoMousseSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(51, 51, 51)
                                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(pannaCotaCheckBox, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(chocoMousseCheckBox, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(redVelvetCheckBox, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(0, 9, Short.MAX_VALUE))
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(puddingCakeSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lamingtonSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(hokkaidoCheeseSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(custardPuddingSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(pieCreamPuffSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(eclairSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(51, 51, 51)
                                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(puddingCakeCheckBox, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(hokkaidoCheeseCheckBox, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(custardPuddingCheckBox, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addGroup(jPanel4Layout.createSequentialGroup()
                                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(eclairCheckBox, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(lamingtonCheckBox, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(pieCreamPuffCheckBox, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(0, 0, Short.MAX_VALUE)))))))
                .addGap(3, 3, 3)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(hrgRedVelvet)
                    .addComponent(hrgPannaCota)
                    .addComponent(hrgChocoMousse)
                    .addComponent(hrgPuddingCake)
                    .addComponent(hrgLamington)
                    .addComponent(hrgHokkaidoCheese)
                    .addComponent(hrgCustardPudding)
                    .addComponent(hrgPieCreamPuff)
                    .addComponent(hrgEclair))
                .addGap(28, 28, 28))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addComponent(jLabel9)
                .addGap(5, 5, 5)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(hrgRedVelvet)
                    .addComponent(redVelvetCheckBox)
                    .addComponent(redVelvetSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(5, 5, 5)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(pannaCotaCheckBox)
                    .addComponent(hrgPannaCota)
                    .addComponent(pannaCotaSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(5, 5, 5)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(chocoMousseCheckBox)
                    .addComponent(hrgChocoMousse)
                    .addComponent(chocoMousseSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(5, 5, 5)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(puddingCakeCheckBox)
                    .addComponent(hrgPuddingCake)
                    .addComponent(puddingCakeSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(5, 5, 5)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lamingtonCheckBox)
                    .addComponent(hrgLamington)
                    .addComponent(lamingtonSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(5, 5, 5)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(hokkaidoCheeseCheckBox)
                    .addComponent(hrgHokkaidoCheese)
                    .addComponent(hokkaidoCheeseSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(5, 5, 5)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(custardPuddingCheckBox)
                    .addComponent(hrgCustardPudding)
                    .addComponent(custardPuddingSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(5, 5, 5)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(pieCreamPuffCheckBox)
                    .addComponent(hrgPieCreamPuff)
                    .addComponent(pieCreamPuffSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(5, 5, 5)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(eclairCheckBox)
                    .addComponent(hrgEclair)
                    .addComponent(eclairSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(33, Short.MAX_VALUE))
        );

        jPanel6.setBackground(new java.awt.Color(255, 178, 207));
        jPanel6.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 4));

        pesanTable.setModel(model);
        setupTable();
        jScrollPane1.setViewportView(pesanTable);

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 652, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                .addContainerGap(18, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jPanel7.setBackground(new java.awt.Color(255, 178, 207));
        jPanel7.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 4));

        orderButton.setBackground(new java.awt.Color(0, 0, 0));
        orderButton.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        orderButton.setForeground(new java.awt.Color(255, 178, 207));
        orderButton.setText("Order");
        orderButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                orderButtonActionPerformed(evt);
            }
        });

        editButton.setBackground(new java.awt.Color(0, 0, 0));
        editButton.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        editButton.setForeground(new java.awt.Color(255, 178, 207));
        editButton.setText("Edit");
        editButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editButtonActionPerformed(evt);
            }
        });

        deleteButton.setBackground(new java.awt.Color(0, 0, 0));
        deleteButton.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        deleteButton.setForeground(new java.awt.Color(255, 178, 207));
        deleteButton.setText("Delete");
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });

        resetButton.setBackground(new java.awt.Color(0, 0, 0));
        resetButton.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        resetButton.setForeground(new java.awt.Color(255, 178, 207));
        resetButton.setText("Reset");
        resetButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetButtonActionPerformed(evt);
            }
        });

        doneButton.setBackground(new java.awt.Color(0, 0, 0));
        doneButton.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        doneButton.setForeground(new java.awt.Color(255, 178, 207));
        doneButton.setText("Selesai / Clear");
        doneButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                doneButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(doneButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addComponent(orderButton, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(32, 32, 32)
                        .addComponent(editButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 33, Short.MAX_VALUE)
                        .addComponent(deleteButton, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(41, 41, 41)
                        .addComponent(resetButton, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(orderButton)
                    .addComponent(editButton)
                    .addComponent(deleteButton)
                    .addComponent(resetButton))
                .addGap(14, 14, 14)
                .addComponent(doneButton)
                .addContainerGap(29, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 330, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, 0)
                                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, 0)
                        .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public void currentDate() {
        Thread clock = new Thread() {
            public void run() {
                try {
                    for(;;) {
                    Calendar cal = new GregorianCalendar();
                    int month = cal.get(Calendar.MONTH);
                    int year = cal.get(Calendar.YEAR);
                    int day = cal.get(Calendar.DATE);
                    tanggalLabel.setText(year + "-" + (month+1) + "-" + day);

                    int second = cal.get(Calendar.SECOND);
                    int minute = cal.get(Calendar.MINUTE);
                    int hour = cal.get(Calendar.HOUR);
                    jamLabel.setText(hour + ":" + minute + ":" + second);
                    sleep(1000);
                    }
                }catch (InterruptedException e) {
                    e.printStackTrace();
                }
            }
        }; 
        clock.start();
    }
    
    private void filter(String query) {
        model = (DefaultTableModel) pesanTable.getModel();
        TableRowSorter<DefaultTableModel> tr = new 
        TableRowSorter<DefaultTableModel> (model);
        
        pesanTable.setRowSorter(tr);
        
        if(query != "No. Meja") {
            tr.setRowFilter(RowFilter.regexFilter(query, 3));
        } else {
            pesanTable.setRowSorter(tr);
        }
    }
    
    private void espressoCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_espressoCheckBoxActionPerformed
        // TODO add your handling code here:
        if(espressoCheckBox.isSelected()) {
            nama[0] = "Espresso";
            harga[0] = 20000;
            jml[0] = (int) espressoSpinner.getValue();
            total[0] = jml[0] * harga[0];
        }
        
        try {
            openDb();
            if (espressoCheckBox.isSelected()) {
                ps = c.prepareStatement("SELECT `gambar` FROM `menu` WHERE "
                    + "produk = 'Espresso'");
                rs = ps.executeQuery();
                if(rs.next()) {
                    byte[] imagedata = rs.getBytes("gambar");
                    format = new ImageIcon(imagedata);
                    Image mm = format.getImage();
                    Image img2 = mm.getScaledInstance(gambar.getWidth(), 
                        gambar.getHeight(), Image.SCALE_SMOOTH);
                    ImageIcon image = new ImageIcon(img2);
                    gambar.setIcon(image);
                }
            } 
            else {
                gambar.setIcon(null);
            }
        } catch(SQLException | ClassNotFoundException ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(null, ex.getLocalizedMessage());
        } finally {
            closeDb();
        }
    }//GEN-LAST:event_espressoCheckBoxActionPerformed

    private void mochaCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mochaCheckBoxActionPerformed
        // TODO add your handling code here:
        if(mochaCheckBox.isSelected()) {
            nama[1] = "Mocha";
            harga[1] = 22000;
            jml[1] = (int) mochaSpinner.getValue();
            total[1] = jml[1] * harga[1];
        }
        
        try {
            openDb();
            if (mochaCheckBox.isSelected()) {
                ps = c.prepareStatement("SELECT `gambar` FROM `menu` WHERE "
                    + "produk = 'Mocha'");
                rs = ps.executeQuery();
                if(rs.next()) {
                    byte[] imagedata = rs.getBytes("gambar");
                    format = new ImageIcon(imagedata);
                    Image mm = format.getImage();
                    Image img2 = mm.getScaledInstance(gambar.getWidth(), 
                        gambar.getHeight(), Image.SCALE_SMOOTH);
                    ImageIcon image = new ImageIcon(img2);
                    gambar.setIcon(image);
                }
            } 
            else {
                gambar.setIcon(null);
            }
        } catch(SQLException | ClassNotFoundException ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(null, ex.getLocalizedMessage());
        } finally {
            closeDb();
        }
    }//GEN-LAST:event_mochaCheckBoxActionPerformed

    private void picolloCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_picolloCheckBoxActionPerformed
        // TODO add your handling code here:
        if(picolloCheckBox.isSelected()) {
            nama[2] = "Picollo";
            harga[2] = 25000;
            jml[2] = (int) picolloSpinner.getValue();
            total[2] = jml[2] * harga[2];
        }
        
        try {
            openDb();
            if (picolloCheckBox.isSelected()) {
                ps = c.prepareStatement("SELECT `gambar` FROM `menu` WHERE "
                    + "produk = 'Picollo'");
                rs = ps.executeQuery();
                if(rs.next()) {
                    byte[] imagedata = rs.getBytes("gambar");
                    format = new ImageIcon(imagedata);
                    Image mm = format.getImage();
                    Image img2 = mm.getScaledInstance(gambar.getWidth(), 
                        gambar.getHeight(), Image.SCALE_SMOOTH);
                    ImageIcon image = new ImageIcon(img2);
                    gambar.setIcon(image);
                }
            } 
            else {
                gambar.setIcon(null);
            }
        } catch(SQLException | ClassNotFoundException ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(null, ex.getLocalizedMessage());
        } finally {
            closeDb();
        }
    }//GEN-LAST:event_picolloCheckBoxActionPerformed

    private void affogattoCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_affogattoCheckBoxActionPerformed
        // TODO add your handling code here:
        if(affogattoCheckBox.isSelected()) {
            nama[3] = "Affogatto";
            harga[3] = 40000;
            jml[3] = (int) affogattoSpinner.getValue();
            total[3] = jml[3] * harga[3];
        }
        
        try {
            openDb();
            if (affogattoCheckBox.isSelected()) {
                ps = c.prepareStatement("SELECT `gambar` FROM `menu` WHERE "
                    + "produk = 'Affogatto'");
                rs = ps.executeQuery();
                if(rs.next()) {
                    byte[] imagedata = rs.getBytes("gambar");
                    format = new ImageIcon(imagedata);
                    Image mm = format.getImage();
                    Image img2 = mm.getScaledInstance(gambar.getWidth(), 
                        gambar.getHeight(), Image.SCALE_SMOOTH);
                    ImageIcon image = new ImageIcon(img2);
                    gambar.setIcon(image);
                }
            } 
            else {
                gambar.setIcon(null);
            }
        } catch(SQLException | ClassNotFoundException ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(null, ex.getLocalizedMessage());
        } finally {
            closeDb();
        }
    }//GEN-LAST:event_affogattoCheckBoxActionPerformed

    private void cappucinoCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cappucinoCheckBoxActionPerformed
        // TODO add your handling code here:
        if(cappucinoCheckBox.isSelected()) {
            nama[4] = "Cappucino";
            harga[4] = 37000;
            jml[4] = (int) cappucinoSpinner.getValue();
            total[4] = jml[4] * harga[4];
        }
        
        try {
            openDb();
            if (cappucinoCheckBox.isSelected()) {
                ps = c.prepareStatement("SELECT `gambar` FROM `menu` WHERE "
                    + "produk = 'Cappucino'");
                rs = ps.executeQuery();
                if(rs.next()) {
                    byte[] imagedata = rs.getBytes("gambar");
                    format = new ImageIcon(imagedata);
                    Image mm = format.getImage();
                    Image img2 = mm.getScaledInstance(gambar.getWidth(), 
                        gambar.getHeight(), Image.SCALE_SMOOTH);
                    ImageIcon image = new ImageIcon(img2);
                    gambar.setIcon(image);
                }
            } 
            else {
                gambar.setIcon(null);
            }
        } catch(SQLException | ClassNotFoundException ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(null, ex.getLocalizedMessage());
        } finally {
            closeDb();
        }
    }//GEN-LAST:event_cappucinoCheckBoxActionPerformed

    private void hazelnutLatteCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hazelnutLatteCheckBoxActionPerformed
        // TODO add your handling code here:
        if(hazelnutLatteCheckBox.isSelected()) {
            nama[5] = "Hazelnut Latte";
            harga[5] = 40000;
            jml[5] = (int) hazelnutLatteSpinner.getValue();
            total[5] = jml[5] * harga[5];
        }
        
        try {
            openDb();
            if (hazelnutLatteCheckBox.isSelected()) {
                ps = c.prepareStatement("SELECT `gambar` FROM `menu` WHERE "
                    + "produk = 'Hazelnut Latte'");
                rs = ps.executeQuery();
                if(rs.next()) {
                    byte[] imagedata = rs.getBytes("gambar");
                    format = new ImageIcon(imagedata);
                    Image mm = format.getImage();
                    Image img2 = mm.getScaledInstance(gambar.getWidth(), 
                        gambar.getHeight(), Image.SCALE_SMOOTH);
                    ImageIcon image = new ImageIcon(img2);
                    gambar.setIcon(image);
                }
            } 
            else {
                gambar.setIcon(null);
            }
        } catch(SQLException | ClassNotFoundException ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(null, ex.getLocalizedMessage());
        } finally {
            closeDb();
        }
    }//GEN-LAST:event_hazelnutLatteCheckBoxActionPerformed

    private void frapucinoCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_frapucinoCheckBoxActionPerformed
        // TODO add your handling code here:
        if(frapucinoCheckBox.isSelected()) {
            nama[7] = "Frapucino";
            harga[7] = 35000;
            jml[7] = (int) frapucinoSpinner.getValue();
            total[7] = jml[7] * harga[7];
        }
        
        try {
            openDb();
            if (frapucinoCheckBox.isSelected()) {
                ps = c.prepareStatement("SELECT `gambar` FROM `menu` WHERE "
                    + "produk = 'Frapucino'");
                rs = ps.executeQuery();
                if(rs.next()) {
                    byte[] imagedata = rs.getBytes("gambar");
                    format = new ImageIcon(imagedata);
                    Image mm = format.getImage();
                    Image img2 = mm.getScaledInstance(gambar.getWidth(), 
                        gambar.getHeight(), Image.SCALE_SMOOTH);
                    ImageIcon image = new ImageIcon(img2);
                    gambar.setIcon(image);
                }
            } 
            else {
                gambar.setIcon(null);
            }
        } catch(SQLException | ClassNotFoundException ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(null, ex.getLocalizedMessage());
        } finally {
            closeDb();
        }
    }//GEN-LAST:event_frapucinoCheckBoxActionPerformed

    private void mochaLatteCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mochaLatteCheckBoxActionPerformed
        // TODO add your handling code here:
        if(mochaLatteCheckBox.isSelected()) {
            nama[6] = "Mocha Latte";
            harga[6] = 40000;
            jml[6] = (int) mochaLatteSpinner.getValue();
            total[6] = jml[6] * harga[6];
        }
        
        try {
            openDb();
            if (mochaLatteCheckBox.isSelected()) {
                ps = c.prepareStatement("SELECT `gambar` FROM `menu` WHERE "
                    + "produk = 'Mocha Latte'");
                rs = ps.executeQuery();
                if(rs.next()) {
                    byte[] imagedata = rs.getBytes("gambar");
                    format = new ImageIcon(imagedata);
                    Image mm = format.getImage();
                    Image img2 = mm.getScaledInstance(gambar.getWidth(), 
                        gambar.getHeight(), Image.SCALE_SMOOTH);
                    ImageIcon image = new ImageIcon(img2);
                    gambar.setIcon(image);
                }
            } 
            else {
                gambar.setIcon(null);
            }
        } catch(SQLException | ClassNotFoundException ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(null, ex.getLocalizedMessage());
        } finally {
            closeDb();
        }
    }//GEN-LAST:event_mochaLatteCheckBoxActionPerformed

    private void redVelvetCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_redVelvetCheckBoxActionPerformed
        // TODO add your handling code here:
        if(redVelvetCheckBox.isSelected()) {
            nama[8] = "Red Velvet";
            harga[8] = 25000;
            jml[8] = (int) redVelvetSpinner.getValue();
            total[8] = jml[8] * harga[8];
        }
        
        try {
            openDb();
            if (redVelvetCheckBox.isSelected()) {
                ps = c.prepareStatement("SELECT `gambar` FROM `menu` WHERE "
                    + "produk = 'Red Velvet'");
                rs = ps.executeQuery();
                if(rs.next()) {
                    byte[] imagedata = rs.getBytes("gambar");
                    format = new ImageIcon(imagedata);
                    Image mm = format.getImage();
                    Image img2 = mm.getScaledInstance(gambar.getWidth(), 
                        gambar.getHeight(), Image.SCALE_SMOOTH);
                    ImageIcon image = new ImageIcon(img2);
                    gambar.setIcon(image);
                }
            } 
            else {
                gambar.setIcon(null);
            }
        } catch(SQLException | ClassNotFoundException ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(null, ex.getLocalizedMessage());
        } finally {
            closeDb();
        }
    }//GEN-LAST:event_redVelvetCheckBoxActionPerformed

    private void pannaCotaCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pannaCotaCheckBoxActionPerformed
        // TODO add your handling code here:
        if(pannaCotaCheckBox.isSelected()) {
            nama[9] = "Panna Cota";
            harga[9] = 25000;
            jml[9] = (int) pannaCotaSpinner.getValue();
            total[9] = jml[9] * harga[9];
        }
        
        try {
            openDb();
            if (pannaCotaCheckBox.isSelected()) {
                ps = c.prepareStatement("SELECT `gambar` FROM `menu` WHERE "
                    + "produk = 'Panna Cota'");
                rs = ps.executeQuery();
                if(rs.next()) {
                    byte[] imagedata = rs.getBytes("gambar");
                    format = new ImageIcon(imagedata);
                    Image mm = format.getImage();
                    Image img2 = mm.getScaledInstance(gambar.getWidth(), 
                        gambar.getHeight(), Image.SCALE_SMOOTH);
                    ImageIcon image = new ImageIcon(img2);
                    gambar.setIcon(image);
                }
            } 
            else {
                gambar.setIcon(null);
            }
        } catch(SQLException | ClassNotFoundException ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(null, ex.getLocalizedMessage());
        } finally {
            closeDb();
        }
    }//GEN-LAST:event_pannaCotaCheckBoxActionPerformed

    private void chocoMousseCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chocoMousseCheckBoxActionPerformed
        // TODO add your handling code here:
        if(chocoMousseCheckBox.isSelected()) {
            nama[10] = "Choco Mousse";
            harga[10] = 30000;
            jml[10] = (int) chocoMousseSpinner.getValue();
            total[10] = jml[10] * harga[10];
        }
        
        try {
            openDb();
            if (chocoMousseCheckBox.isSelected()) {
                ps = c.prepareStatement("SELECT `gambar` FROM `menu` WHERE "
                    + "produk = 'Choco Mousse'");
                rs = ps.executeQuery();
                if(rs.next()) {
                    byte[] imagedata = rs.getBytes("gambar");
                    format = new ImageIcon(imagedata);
                    Image mm = format.getImage();
                    Image img2 = mm.getScaledInstance(gambar.getWidth(), 
                        gambar.getHeight(), Image.SCALE_SMOOTH);
                    ImageIcon image = new ImageIcon(img2);
                    gambar.setIcon(image);
                }
            } 
            else {
                gambar.setIcon(null);
            }
        } catch(SQLException | ClassNotFoundException ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(null, ex.getLocalizedMessage());
        } finally {
            closeDb();
        }
    }//GEN-LAST:event_chocoMousseCheckBoxActionPerformed

    private void puddingCakeCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_puddingCakeCheckBoxActionPerformed
        // TODO add your handling code here:
        if(puddingCakeCheckBox.isSelected()) {
            nama[11] = "Pudding Cake";
            harga[11] = 25000;
            jml[11] = (int) puddingCakeSpinner.getValue();
            total[11] = jml[11] * harga[11];
        }
        
        try {
            openDb();
            if (puddingCakeCheckBox.isSelected()) {
                ps = c.prepareStatement("SELECT `gambar` FROM `menu` WHERE "
                    + "produk = 'Pudding Cake'");
                rs = ps.executeQuery();
                if(rs.next()) {
                    byte[] imagedata = rs.getBytes("gambar");
                    format = new ImageIcon(imagedata);
                    Image mm = format.getImage();
                    Image img2 = mm.getScaledInstance(gambar.getWidth(), 
                        gambar.getHeight(), Image.SCALE_SMOOTH);
                    ImageIcon image = new ImageIcon(img2);
                    gambar.setIcon(image);
                }
            } 
            else {
                gambar.setIcon(null);
            }
        } catch(SQLException | ClassNotFoundException ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(null, ex.getLocalizedMessage());
        } finally {
            closeDb();
        }
    }//GEN-LAST:event_puddingCakeCheckBoxActionPerformed

    private void lamingtonCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lamingtonCheckBoxActionPerformed
        // TODO add your handling code here:
        if(lamingtonCheckBox.isSelected()) {
            nama[12] = "Lamington";
            harga[12] = 15000;
            jml[12] = (int) lamingtonSpinner.getValue();
            total[12] = jml[12] * harga[12];
        }
        
        try {
            openDb();
            if (lamingtonCheckBox.isSelected()) {
                ps = c.prepareStatement("SELECT `gambar` FROM `menu` WHERE "
                    + "produk = 'Lamington'");
                rs = ps.executeQuery();
                if(rs.next()) {
                    byte[] imagedata = rs.getBytes("gambar");
                    format = new ImageIcon(imagedata);
                    Image mm = format.getImage();
                    Image img2 = mm.getScaledInstance(gambar.getWidth(), 
                        gambar.getHeight(), Image.SCALE_SMOOTH);
                    ImageIcon image = new ImageIcon(img2);
                    gambar.setIcon(image);
                }
            } 
            else {
                gambar.setIcon(null);
            }
        } catch(SQLException | ClassNotFoundException ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(null, ex.getLocalizedMessage());
        } finally {
            closeDb();
        }
    }//GEN-LAST:event_lamingtonCheckBoxActionPerformed

    private void hokkaidoCheeseCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hokkaidoCheeseCheckBoxActionPerformed
        // TODO add your handling code here:
        if(hokkaidoCheeseCheckBox.isSelected()) {
            nama[13] = "Hokkaido Cheese";
            harga[13] = 20000;
            jml[13] = (int) hokkaidoCheeseSpinner.getValue();
            total[13] = jml[13] * harga[13];
        }
        
        try {
            openDb();
            if (hokkaidoCheeseCheckBox.isSelected()) {
                ps = c.prepareStatement("SELECT `gambar` FROM `menu` WHERE "
                    + "produk = 'Hokkaido Cheese'");
                rs = ps.executeQuery();
                if(rs.next()) {
                    byte[] imagedata = rs.getBytes("gambar");
                    format = new ImageIcon(imagedata);
                    Image mm = format.getImage();
                    Image img2 = mm.getScaledInstance(gambar.getWidth(), 
                        gambar.getHeight(), Image.SCALE_SMOOTH);
                    ImageIcon image = new ImageIcon(img2);
                    gambar.setIcon(image);
                }
            } 
            else {
                gambar.setIcon(null);
            }
        } catch(SQLException | ClassNotFoundException ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(null, ex.getLocalizedMessage());
        } finally {
            closeDb();
        }
    }//GEN-LAST:event_hokkaidoCheeseCheckBoxActionPerformed

    private void custardPuddingCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_custardPuddingCheckBoxActionPerformed
        // TODO add your handling code here:
        if(custardPuddingCheckBox.isSelected()) {
            nama[14] = "Custard Pudding";
            harga[14] = 13000;
            jml[14] = (int) custardPuddingSpinner.getValue();
            total[14] = jml[14] * harga[14];
        }
        
        try {
            openDb();
            if (custardPuddingCheckBox.isSelected()) {
                ps = c.prepareStatement("SELECT `gambar` FROM `menu` WHERE "
                    + "produk = 'Custard Pudding'");
                rs = ps.executeQuery();
                if(rs.next()) {
                    byte[] imagedata = rs.getBytes("gambar");
                    format = new ImageIcon(imagedata);
                    Image mm = format.getImage();
                    Image img2 = mm.getScaledInstance(gambar.getWidth(), 
                        gambar.getHeight(), Image.SCALE_SMOOTH);
                    ImageIcon image = new ImageIcon(img2);
                    gambar.setIcon(image);
                }
            } 
            else {
                gambar.setIcon(null);
            }
        } catch(SQLException | ClassNotFoundException ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(null, ex.getLocalizedMessage());
        } finally {
            closeDb();
        }
    }//GEN-LAST:event_custardPuddingCheckBoxActionPerformed

    private void pieCreamPuffCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pieCreamPuffCheckBoxActionPerformed
        // TODO add your handling code here:
        if(pieCreamPuffCheckBox.isSelected()) {
            nama[15] = "Pie Cream Puff";
            harga[15] = 18000;
            jml[15] = (int) pieCreamPuffSpinner.getValue();
            total[15] = jml[15] * harga[15];
        }
        
        try {
            openDb();
            if (pieCreamPuffCheckBox.isSelected()) {
                ps = c.prepareStatement("SELECT `gambar` FROM `menu` WHERE "
                    + "produk = 'Pie Cream Puff'");
                rs = ps.executeQuery();
                if(rs.next()) {
                    byte[] imagedata = rs.getBytes("gambar");
                    format = new ImageIcon(imagedata);
                    Image mm = format.getImage();
                    Image img2 = mm.getScaledInstance(gambar.getWidth(), 
                        gambar.getHeight(), Image.SCALE_SMOOTH);
                    ImageIcon image = new ImageIcon(img2);
                    gambar.setIcon(image);
                }
            } 
            else {
                gambar.setIcon(null);
            }
        } catch(SQLException | ClassNotFoundException ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(null, ex.getLocalizedMessage());
        } finally {
            closeDb();
        }
    }//GEN-LAST:event_pieCreamPuffCheckBoxActionPerformed

    private void eclairCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eclairCheckBoxActionPerformed
        // TODO add your handling code here:
        if(eclairCheckBox.isSelected()) {
            nama[16] = "Eclair";
            harga[16] = 25000;
            jml[16] = (int) eclairSpinner.getValue();
            total[16] = jml[16] * harga[16];
        }
        
        try {
            openDb();
            if (eclairCheckBox.isSelected()) {
                ps = c.prepareStatement("SELECT `gambar` FROM `menu` WHERE "
                    + "produk = 'Eclair'");
                rs = ps.executeQuery();
                if(rs.next()) {
                    byte[] imagedata = rs.getBytes("gambar");
                    format = new ImageIcon(imagedata);
                    Image mm = format.getImage();
                    Image img2 = mm.getScaledInstance(gambar.getWidth(), 
                        gambar.getHeight(), Image.SCALE_SMOOTH);
                    ImageIcon image = new ImageIcon(img2);
                    gambar.setIcon(image);
                }
            } 
            else {
                gambar.setIcon(null);
            }
        } catch(SQLException | ClassNotFoundException ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(null, ex.getLocalizedMessage());
        } finally {
            closeDb();
        }
    }//GEN-LAST:event_eclairCheckBoxActionPerformed

    private void closeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeButtonActionPerformed
        // TODO add your handling code here:
        model.setRowCount(0);
        model.setColumnCount(0);
        setVisible(false);
        Tampilan slide = new Tampilan();
        slide.setVisible(true);
    }//GEN-LAST:event_closeButtonActionPerformed

    private void orderButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_orderButtonActionPerformed
        // TODO add your handling code here:
        int tambah;
        int transaksi = 1;
        String tanggal = tanggalLabel.getText();
        String jam = jamLabel.getText();
        String nomor = nomorComboBox.getSelectedItem().toString();
        
        JCheckBox[] boxes = {espressoCheckBox, mochaCheckBox, picolloCheckBox,
            affogattoCheckBox, cappucinoCheckBox, hazelnutLatteCheckBox, 
            mochaLatteCheckBox, frapucinoCheckBox, redVelvetCheckBox, 
            pannaCotaCheckBox, chocoMousseCheckBox, puddingCakeCheckBox,
            lamingtonCheckBox, hokkaidoCheeseCheckBox, custardPuddingCheckBox, 
            pieCreamPuffCheckBox, eclairCheckBox};
        
        if(!nomor.equals("No. Meja")) {
            for(int i = 0; i < boxes.length; i++) {
                jml[0] = (int) espressoSpinner.getValue();
                jml[1] = (int) mochaSpinner.getValue();
                jml[2] = (int) picolloSpinner.getValue();
                jml[3] = (int) affogattoSpinner.getValue();
                jml[4] = (int) cappucinoSpinner.getValue();
                jml[5] = (int) hazelnutLatteSpinner.getValue();
                jml[6] = (int) mochaLatteSpinner.getValue();
                jml[7] = (int) frapucinoSpinner.getValue();
                jml[8] = (int) redVelvetSpinner.getValue();
                jml[9] = (int) pannaCotaSpinner.getValue();
                jml[10] = (int) chocoMousseSpinner.getValue();
                jml[11] = (int) puddingCakeSpinner.getValue();
                jml[12] = (int) lamingtonSpinner.getValue();
                jml[13] = (int) hokkaidoCheeseSpinner.getValue();
                jml[14] = (int) custardPuddingSpinner.getValue();
                jml[15] = (int) pieCreamPuffSpinner.getValue();
                jml[16] = (int) eclairSpinner.getValue();
                total[i] = jml[i] * harga[i]; 
                if(boxes[i].isSelected()) {
                    if(jml[i] > 0) {
                        try {
                            openDb();
                            String query = ("SELECT * FROM `pemesanan` ORDER BY "
                                + "`transaksi` DESC LIMIT 1;");
                            rs = s.executeQuery(query);
                            if(rs.next()) {
                                tambah = rs.getInt("transaksi");
                                transaksi = tambah + 1;
                            }

                            s.executeUpdate(
                                "INSERT INTO `pemesanan` VALUE (" + transaksi + 
                                ", '" + tanggal + "', '" + jam + "', '" + nomor 
                                + "', '" + nama[i] + "', " + jml[i] + ", " + 
                                harga[i] + ", " + total[i] + ")");

                            Object[] row = {transaksi, tanggal, jam, nomor, 
                                nama[i], jml[i], harga[i], total[i]};
                            model.addRow(row);

                            JOptionPane.showMessageDialog(null, "Data added!");

                        } catch(SQLException | ClassNotFoundException ex) {
                            ex.printStackTrace();
                            JOptionPane.showMessageDialog(null, 
                                ex.getLocalizedMessage());
                        } finally {
                            closeDb();
                        }
                    }else {
                    JOptionPane.showMessageDialog(null, "Invalid Jumlah");
                    }
                } 
            }
        }else {
            JOptionPane.showMessageDialog(null, "Harap pilih No. Meja terlebih "
                + "dahulu");
        }
    }//GEN-LAST:event_orderButtonActionPerformed

    private void resetButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetButtonActionPerformed
        // TODO add your handling code here:
        
        int clear = model.getRowCount();
        
        for(int i = clear - 1; i >= 0; i--) {
            model.removeRow(i);
        }
        
        try {
            openDb();
            s.executeUpdate("DELETE FROM `pemesanan`");
        } catch(SQLException | ClassNotFoundException ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(null, ex.getLocalizedMessage());
        } finally {
            closeDb();
        }
    }//GEN-LAST:event_resetButtonActionPerformed

    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
        // TODO add your handling code here:
        int row = pesanTable.getSelectedRow();
        int ubah;
        String selected = model.getValueAt(row, 0).toString();
        
        if(pesanTable.getSelectedRowCount() == 1) {
            model.removeRow(pesanTable.getSelectedRow());
            try {
                ubah = Integer.parseInt(selected);
                openDb();
                ps = c.prepareStatement("DELETE FROM `pemesanan` WHERE "
                    + "transaksi = " + ubah);
                ps.executeUpdate();
                JOptionPane.showMessageDialog(null, "Delete Successfully");
            } catch(SQLException | ClassNotFoundException ex) {
                ex.printStackTrace();
                JOptionPane.showMessageDialog(null, ex.getLocalizedMessage());
            } finally {
                closeDb();
            }
        } else {
            JOptionPane.showMessageDialog(null, "Harap Delete Satu per Satu");
        }
    }//GEN-LAST:event_deleteButtonActionPerformed
   
    private void editButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editButtonActionPerformed
        // TODO add your handling code here:
        int row = pesanTable.getSelectedRow();
        int ubah;
        String selected = model.getValueAt(row, 0).toString();
        String tanggal = tanggalLabel.getText();
        String jam = jamLabel.getText();
        String nomor = nomorComboBox.getSelectedItem().toString();
        
        JCheckBox[] select = {espressoCheckBox, mochaCheckBox, picolloCheckBox,
            affogattoCheckBox, cappucinoCheckBox, hazelnutLatteCheckBox, 
            mochaLatteCheckBox, frapucinoCheckBox, redVelvetCheckBox, 
            pannaCotaCheckBox, chocoMousseCheckBox, puddingCakeCheckBox,
            lamingtonCheckBox, hokkaidoCheeseCheckBox, custardPuddingCheckBox, 
            pieCreamPuffCheckBox, eclairCheckBox};
        
        if(pesanTable.getSelectedRowCount() == 1) {
            for(int i = 0; i < select.length; i++) {
                jml[0] = (int) espressoSpinner.getValue();
                jml[1] = (int) mochaSpinner.getValue();
                jml[2] = (int) picolloSpinner.getValue();
                jml[3] = (int) affogattoSpinner.getValue();
                jml[4] = (int) cappucinoSpinner.getValue();
                jml[5] = (int) hazelnutLatteSpinner.getValue();
                jml[6] = (int) mochaLatteSpinner.getValue();
                jml[7] = (int) frapucinoSpinner.getValue();
                jml[8] = (int) redVelvetSpinner.getValue();
                jml[9] = (int) pannaCotaSpinner.getValue();
                jml[10] = (int) chocoMousseSpinner.getValue();
                jml[11] = (int) puddingCakeSpinner.getValue();
                jml[12] = (int) lamingtonSpinner.getValue();
                jml[13] = (int) hokkaidoCheeseSpinner.getValue();
                jml[14] = (int) custardPuddingSpinner.getValue();
                jml[15] = (int) pieCreamPuffSpinner.getValue();
                jml[16] = (int) eclairSpinner.getValue();
                total[i] = jml[i] * harga[i];
                if(select[i].isSelected()) {  
                    if(jml[i] > 0) {
                        model.setValueAt(tanggal, row, 1);
                        model.setValueAt(jam, row, 2);
                        model.setValueAt(nomor, row, 3);
                        model.setValueAt(nama[i], row, 4);
                        model.setValueAt(jml[i], row, 5);
                        model.setValueAt(harga[i], row, 6);
                        model.setValueAt(total[i], row, 7);
                        try {
                            openDb();
                            ubah = Integer.parseInt(selected);
                            ps = c.prepareStatement("UPDATE `pemesanan` SET "
                                + "tanggal" + " = '" + tanggal + "', jam = '" + 
                                jam + "', nomor" + " = '" + nomor + 
                                "', nama = '" + nama[i] + "', jml" + " = " + 
                                jml[i] + ", harga = " + harga[i] + ", total" + 
                                " = " + total[i] + " WHERE transaksi = " + ubah 
                                );
                            ps.executeUpdate();
                            JOptionPane.showMessageDialog(null, "Edit "
                                + "Successfully");
                        } catch(SQLException | ClassNotFoundException ex) {
                            ex.printStackTrace();
                            JOptionPane.showMessageDialog(null, 
                                ex.getLocalizedMessage());
                        } finally {
                            closeDb();
                        }
                    } else {
                        JOptionPane.showMessageDialog(null, "Invalid Jumlah");
                    }
                }
            }
        } else {
            JOptionPane.showMessageDialog(null, "Harap Edit Satu per Satu");
        }
    }//GEN-LAST:event_editButtonActionPerformed

    private void nomorComboBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_nomorComboBoxItemStateChanged
        // TODO add your handling code here:
        String query = nomorComboBox.getSelectedItem().toString();
        
        filter(query);
    }//GEN-LAST:event_nomorComboBoxItemStateChanged

    private void doneButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_doneButtonActionPerformed
        // TODO add your handling code here:
        espressoSpinner.setValue(0);
        mochaSpinner.setValue(0);
        picolloSpinner.setValue(0);
        affogattoSpinner.setValue(0);
        cappucinoSpinner.setValue(0);
        hazelnutLatteSpinner.setValue(0);
        mochaLatteSpinner.setValue(0);
        frapucinoSpinner.setValue(0);
        redVelvetSpinner.setValue(0);
        pannaCotaSpinner.setValue(0);
        chocoMousseSpinner.setValue(0);
        puddingCakeSpinner.setValue(0);
        lamingtonSpinner.setValue(0);
        hokkaidoCheeseSpinner.setValue(0);
        custardPuddingSpinner.setValue(0);
        pieCreamPuffSpinner.setValue(0);
        eclairSpinner.setValue(0);
        
        espressoCheckBox.setSelected(false);
        mochaCheckBox.setSelected(false);
        picolloCheckBox.setSelected(false);
        affogattoCheckBox.setSelected(false);
        cappucinoCheckBox.setSelected(false);
        hazelnutLatteCheckBox.setSelected(false);
        mochaLatteCheckBox.setSelected(false);
        frapucinoCheckBox.setSelected(false);
        redVelvetCheckBox.setSelected(false);
        pannaCotaCheckBox.setSelected(false);
        chocoMousseCheckBox.setSelected(false);
        puddingCakeCheckBox.setSelected(false);
        lamingtonCheckBox.setSelected(false);
        hokkaidoCheeseCheckBox.setSelected(false);
        custardPuddingCheckBox.setSelected(false);
        pieCreamPuffCheckBox.setSelected(false);
        eclairCheckBox.setSelected(false);
    }//GEN-LAST:event_doneButtonActionPerformed

    private void panelMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_panelMouseDragged
        int x1 = evt.getXOnScreen();
        int y1 = evt.getYOnScreen();

        this.setLocation(x1-x, y1-y);
    }//GEN-LAST:event_panelMouseDragged

    private void panelMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_panelMousePressed
        this.x = evt.getX();
        this.y = evt.getY();
    }//GEN-LAST:event_panelMousePressed

    /**
     * @param args the command line arguments
     */
   
    
    private static void openDb() throws ClassNotFoundException, SQLException {
       String URL = "jdbc:mysql://localhost:3306/dbkasir";
       String USERNAME = "root";
       String PASSWORD = "";
       
       Class.forName("com.mysql.cj.jdbc.Driver");
       c = DriverManager.getConnection(URL, USERNAME, PASSWORD);
       s = c.createStatement();
    }
    
    private static void closeDb() {
        try {
            rs.close();
            s.close();
            c.close();
        } catch(SQLException e) {
            e.printStackTrace();
        }
    }
    
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Pemesanan.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Pemesanan.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Pemesanan.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Pemesanan.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Pemesanan().setVisible(true);
            }
        });
    }
    
    private static void setupTable() {
        model.addColumn("Nomor");
        model.addColumn("Tanggal");
        model.addColumn("Jam");
        model.addColumn("No. Meja");
        model.addColumn("Nama");
        model.addColumn("Jumlah");
        model.addColumn("Harga");
        model.addColumn("Total");
        
        try {
            openDb();
            rs = s.executeQuery("SELECT * FROM `pemesanan`");
            
            while(rs.next()) {
                Object[] row = {
                    rs.getString("transaksi"),
                    rs.getString("tanggal"),
                    rs.getString("jam"),
                    rs.getString("nomor"),
                    rs.getString("nama"),
                    rs.getString("jml"),
                    rs.getString("harga"),
                    rs.getString("total")
                };
                model.addRow(row);
            }
        }catch(SQLException | ClassNotFoundException ex) {
            ex.printStackTrace();
        } finally {
            closeDb();
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox affogattoCheckBox;
    private javax.swing.JSpinner affogattoSpinner;
    private javax.swing.JCheckBox cappucinoCheckBox;
    private javax.swing.JSpinner cappucinoSpinner;
    private javax.swing.JCheckBox chocoMousseCheckBox;
    private javax.swing.JSpinner chocoMousseSpinner;
    private javax.swing.JButton closeButton;
    private javax.swing.JCheckBox custardPuddingCheckBox;
    private javax.swing.JSpinner custardPuddingSpinner;
    private javax.swing.JButton deleteButton;
    private javax.swing.JButton doneButton;
    private javax.swing.JCheckBox eclairCheckBox;
    private javax.swing.JSpinner eclairSpinner;
    private javax.swing.JButton editButton;
    private javax.swing.JCheckBox espressoCheckBox;
    private javax.swing.JSpinner espressoSpinner;
    private javax.swing.JCheckBox frapucinoCheckBox;
    private javax.swing.JSpinner frapucinoSpinner;
    private javax.swing.JLabel gambar;
    private javax.swing.JCheckBox hazelnutLatteCheckBox;
    private javax.swing.JSpinner hazelnutLatteSpinner;
    private javax.swing.JCheckBox hokkaidoCheeseCheckBox;
    private javax.swing.JSpinner hokkaidoCheeseSpinner;
    private javax.swing.JLabel hrgAffogatto;
    private javax.swing.JLabel hrgCappucino;
    private javax.swing.JLabel hrgChocoMousse;
    private javax.swing.JLabel hrgCustardPudding;
    private javax.swing.JLabel hrgEclair;
    private javax.swing.JLabel hrgEspresso;
    private javax.swing.JLabel hrgFrapucino;
    private javax.swing.JLabel hrgHazelnutLatte;
    private javax.swing.JLabel hrgHokkaidoCheese;
    private javax.swing.JLabel hrgLamington;
    private javax.swing.JLabel hrgMocha;
    private javax.swing.JLabel hrgMochaLatte;
    private javax.swing.JLabel hrgPannaCota;
    private javax.swing.JLabel hrgPicollo;
    private javax.swing.JLabel hrgPieCreamPuff;
    private javax.swing.JLabel hrgPuddingCake;
    private javax.swing.JLabel hrgRedVelvet;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel jamLabel;
    private javax.swing.JCheckBox lamingtonCheckBox;
    private javax.swing.JSpinner lamingtonSpinner;
    private javax.swing.JCheckBox mochaCheckBox;
    private javax.swing.JCheckBox mochaLatteCheckBox;
    private javax.swing.JSpinner mochaLatteSpinner;
    private javax.swing.JSpinner mochaSpinner;
    private javax.swing.JComboBox<String> nomorComboBox;
    private javax.swing.JButton orderButton;
    private javax.swing.JLabel panel;
    private javax.swing.JCheckBox pannaCotaCheckBox;
    private javax.swing.JSpinner pannaCotaSpinner;
    private javax.swing.JTable pesanTable;
    private javax.swing.JCheckBox picolloCheckBox;
    private javax.swing.JSpinner picolloSpinner;
    private javax.swing.JCheckBox pieCreamPuffCheckBox;
    private javax.swing.JSpinner pieCreamPuffSpinner;
    private javax.swing.JCheckBox puddingCakeCheckBox;
    private javax.swing.JSpinner puddingCakeSpinner;
    private javax.swing.JCheckBox redVelvetCheckBox;
    private javax.swing.JSpinner redVelvetSpinner;
    private javax.swing.JButton resetButton;
    private javax.swing.JLabel tanggalLabel;
    // End of variables declaration//GEN-END:variables
}
